// Declaration of global variables:

var currentDice;
var currentAnswer;

var gameStarted;

// End global variables

// Math functions for more convenient input.

function log(a,b){
    return Math.log(b)/Math.log(a);
}

function exp(a,b){
    return Math.pow(a,b);
}

function cos(a){
    return Math.cos(a);
}

function arccos(a){
    return Math.acos(a);
}

function sin(a){
    return Math.sin(a);
}

function arcsin(a){
    return Math.asin(a);
}

function tan(a){
    return sin(a)/cos(a);
}

function arctan(a){
    return Math.atan(a);
}

function sec(a){
    return 1.0/cos(a);
}

function arcsec(a){
    return arccos(1.0/a);    
}

function csc(a){
    return 1.0/sin(a);
}

function arccsc(a){
    return arcsin(1.0/a);
}

function cot(a){
    return 1.0/tan(a);
}

function arccot(a){
    return arctan(1.0/a);
}

// End Math functions

// Checking functions.
function checkStr(str,dice){
    patt = /[0-9]+/g;
    missing = [];
    extra = [];
    error = 0;
    console.log(str);
    console.log("Right before do...");
    do {
	console.log("Inside the do...");
        m = patt.exec(str);
	console.log(m);
        if (m !== null){
            num = m[0];
            num = parseInt(num,10);
            ind = dice.indexOf(num);
            if (ind === -1){
                console.log(num.toString()+" isn't in the dice.");
		// return num.toString();
		extra.push(num);

            } else {
                dice.splice(ind,1);
		console.log(dice.toString());
            }
        }
    }  while (m !== null);

    if (dice.length !== 0){
        console.log("The following dice went unused: "+dice.toString());
	//        return false;
	missing = dice;
    }
    if (missing.length > 0){
	error+=1;
    } 
    if (extra.length > 0){
	error+=2;
    }
    if (error != 0){
	return [error,[missing,extra]];
    } else {
	return true;
    }
}

function checkAns(str, ans){
    submitValue = eval(str)
    if (submitValue == ans){
        return true;
    }
    return submitValue;
}

function feedback(fb){
    $(".feedback").text(fb);
}

function checkSubmition(str,dice,ans){

    winner = true;
    alert("Checking Submition");
    // Check numbers.
    strReturn = checkStr(str,dice);
    ansReturn = checkAns(str,ans);
    if (strReturn !== true){
	winner = false;
	error = strReturn[0];
	if (error == 1){ // We were only missing numbers...
	    feedback("Nope! The following numbers were missing: "+strReturn[1][0].toString());
	} else if (error == 2) { // We only had extra numbers...
	    feedback("Nope! These numbers aren't in the dice: "+strReturn[1][1].toString());
	} else if (error == 3){
	    feedback("No.\nYou missed these numbers: "+strReturn[1][0].toString()+".\nAnd these don't belong: "+strReturn[1][1].toString());
	} else {
	    feedback("System error: "+error.toString());
	}
  	
	$(".submit-field").val("");
    } // End number check
    // CHeck equivilance
    else if (ansReturn !== true){
	
	// Prorate feedback on distance from mark...
        sigma = Math.floor(ans/5); 
	if (ansReturn > ans){
	    max = ansReturn;
	    min = ans;  
	} else {
	    max = ans;
	    min = ansReturn;
	}

	diff = max-min;

	if (diff>(10*sigma)){ // Way off!
	    feedback("Holy %&$#! You are way off. "+ansReturn.toString()+" is no where near "+ans.toString()+".");
	} else if (diff>(5*sigma)){ // Not close.
	    feedback("Way off. "+ansReturn.toString()+" isn't anything like "+ans.toString()+".");
	} else if (diff > (3*sigma)){ // Getting closer
	    feedback("Pretty close, but no. "+ansReturn.toString() + " is pretty close to "+ans.toString()+".");
	} else if (diff > sigma) {
	    feedback(digitToWord(ansReturn.toString()) + " is quite close to "+ans.toString()+", but no cigar.");
	} else { // Smokin' close.
	    feedback("So close! Only "+diff.toString()+" off!");
	}

    } else {
	feedback("Nailed it! Nice!");
	score();
    }


}

// End Checking Functions.

function score(){
    feedback("Way to score! Unfortunately, there's no score system yet...");
}




// Old function for consolebased dev stage game.

function playGame(){
    dice = [2,8,3,1];
    ans = 9;
    str = prompt("Numbers: "+dice.toString()+"\n"+"Answer: "+ans.toString());
    if (checkStr(str,dice) === false){
        alert("You haven't used the right numbers!");
    }  else if (checkAns(str,ans) === false){
        alert("Your expression doesn't evaluate correctly!");
    } else {
        alert("You win!");
    }
	str = "log(2,8)*exp(1,3)";

}

// End playGame


// Begin game definitions.

DICE = [6]; // Right now, we only have one type of dice
SIDES_PER_TYPE = [6];

function digitToWord(digit){

	switch (digit){

		case 0:
			return "zero";
			break;
		case 1:
			return "one";
			break;
		case 2:
			return "two";
			break;
		case 3:
			return "three";
			break;
		case 4:
			return "four";
			break;
		case 5:
			return "five";
			break;
		case 6:
			return "six";
			break;
		case 7:
			return "seven";
			break;
		case 8: 
			return "eight";
			break;
		case 9: 
			return "nine";
			break;
		case 10:
			return "ten";
			break;
		case 11:
			return "eleven";
			break;
		case 12: 
			return "twelve";
			break;
		case 13:
			return "thirteen";
			break;
		case 14: 
			return "fourteen";
			break;
		case 15:
			return "fifteen";
			break;
		case 16:
			return "sixteen";
			break;
		default:
			return "Out of range";
			break;

	}
	return "Error";
}

function sixSidedDice(){
	classes = ["six-one","six-two","six-three","six-four","six-five","six-six"];
	sides = 6;
	number = Math.floor(Math.random()*sides);
	return classes[number];
}

function Dice(sides){
	self.name = ""
	self.sides = sides
	r = Math.floor(Math.random()*sides)+1
	self.value = r
	self.name = digitToWord(sides)+"-"+digitToWord(r)
	return self;
}



function rollDice(){
        currentDice = [];
	diceList = [6,6,6,6,6];

	$(".dice").attr("class","dice"); // Wipe out all other classes.
	for (i = 0;i<5;i++){
		die = new Dice(diceList[i]);
		$(".dice:eq("+i.toString()+")").addClass(die.name);
		$(".digit:eq("+i.toString()+")").text(die.value);
		if (i == 4){
		    currentAnswer = die.value;
		} else {
		    currentDice.push(die.value);
		}
	}



}

$(document).ready(function(){

	$(".start-button").click(function(){
		gameStarted = true;
		rollDice();

	    });
	$(".dice").attr("src","/./src/img/img_trans.gif");
	$(".submit-btn").click(function(){
		if (gameStarted !== true){
		    alert("You must begin the game to play! Press start!");
		}

		input = $(".submit-field").val();
		checkSubmition(input,currentDice,currentAnswer);


	});
})
